import { Box, Button, CircularProgress, CircularProgressLabel, Flex, Heading, HStack, Input, Text, VStack } from '@chakra-ui/react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useRef, useState } from 'react'
import useFFmpeg from '../hooks/useFFmpeg'
import { signIn, signOut, useSession } from "next-auth/react"
import styles from '../styles/Home.module.css'

import { getToken } from 'next-auth/jwt'
import { useRouter } from 'next/router'

interface Twit {
  id: string
  text: string
}

const Home: NextPage = ({ token }) => {
  const { progress, videoURL, handleFileChange } = useFFmpeg()
  const fileRef = useRef<HTMLInputElement>(null)

  const { status, data } = useSession()

  const [statuses, setStatuses] = useState<Twit[]>([])

  async function handleTweet() {
    if (!videoURL) return

    const file = await fetch(videoURL).then(r => r.blob());

    const body = new FormData()
    body.append("content", "APIテスト")
    body.append("file", file)

    const results = await fetch('/api/twitter/tweet', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'multipart/form-data'
      },
      body: body,
    }).then((res) => res.json())

    setStatuses(results.data)
  }

  async function handleSearch() {
    const query = 'りくせん';

    const results = await fetch('/api/twitter/search', {
      method: 'POST',
      body: JSON.stringify({
        query
      })
    }).then(res => res.json());

    setStatuses(results.data);
    console.log(results)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <VStack mb={10}>
          <Heading>Twitter用動画コンバーター</Heading>
          <Text>このサイトは、サーバーのリソースを使う代わりに、あなたのブラウザ上でエンコードを行います。</Text>
        </VStack>

        <VStack mb={12}>
          {status !== "authenticated" && <VStack>
            <Text>Twitterに投稿したい場合は、動画をダウンロードするか、ログインしてください。</Text>
            <Text><b>ログインしてから</b>動画を変換すると、スムーズにツイートできます。</Text>
            <Button colorScheme="blue" onClick={() => signIn("twitter")}>Twitterにログインする</Button>
          </VStack>}
          {status === "authenticated" && <VStack>
            <p>{data.user?.name} としてログイン中</p>
            <Button onClick={() => signOut()}>Twitterからログアウト</Button>
            {videoURL && <Button colorScheme="blue" onClick={() => handleSearch()}>サーチ</Button>}
            {videoURL && <Button colorScheme="blue" onClick={() => handleTweet()}>現在の動画をツイートする</Button>}
          </VStack>}
        </VStack>

        <input
          type="file"
          name="file"
          id="file"
          hidden
          onChange={handleFileChange}
          ref={fileRef}
        />
        <Button mb={8} colorScheme="green" onClick={() => fileRef.current?.click()}>動画ファイルを選択</Button>
        {/* <Button onClick={() => postTweet()}>ツイートする</Button> */}

        {progress &&
          <HStack gap={12}>
            <CircularProgress value={Math.round(progress?.ratio * 100)} size='230px'>
              <CircularProgressLabel>
                <Heading fontSize="xl">変換率</Heading>
                <Heading fontSize="3xl">{Math.round(progress?.ratio ?? 0 * 100)} %</Heading>
              </CircularProgressLabel>
            </CircularProgress>
            <CircularProgress color='green.300' value={100} size='230px'>
              <CircularProgressLabel>
                <Heading fontSize="xl">動画の長さ</Heading>
                <Heading  fontSize="3xl">{progress?.duration}{progress?.duration && "秒"}</Heading>
              </CircularProgressLabel>
            </CircularProgress>
            <CircularProgress size='230px' isIndeterminate>
              <CircularProgressLabel>
                <Heading fontSize="xl">変換済み時間</Heading>
                <Heading fontSize="3xl">{progress?.time}{progress?.time && "秒"}</Heading>
              </CircularProgressLabel>
            </CircularProgress>
          </HStack>
        }

          {videoURL && <Flex flexDirection="column" alignItems="center" justifyContent="center" mt={12}>
            <Heading fontSize="xl" mb={3}>プレビュー</Heading>
            <video
              src={videoURL}
              width={"1024px"}
              height={"576px"}
              controls
            />
          </Flex>}
      </main>
    </div>
  )
}

export async function getServerSideProps({ req }) {
  const token = await getToken({ req, raw: true })

  return {
    props: {
      token
    }
  }
}

export default Home
